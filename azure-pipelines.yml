trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  artifactName: 'drop'

stages:
  - stage: Build
    jobs:
      - job: "Detect"
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              changedFiles=$(git diff --name-status HEAD^ HEAD)
              echo "$changedFiles"
              if echo "$changedFiles" | grep -q "wp-content/themes/RSNE"; then
                echo "##vso[task.setvariable variable=runNodeTask]true"
                echo "##vso[task.setvariable variable=themeDirectory]wp-content/themes/RSNE"                
                echo "Files in wp-content/themes/sample have been changed."
              elif echo "$changedFiles" | grep -q "wp-content/themes/example"; then
                echo "##vso[task.setvariable variable=runNodeTask]true"
                echo "##vso[task.setvariable variable=themeDirectory]wp-content/themes/example"
                echo "Files in wp-content/themes/example have been changed."
              else
                echo "##vso[task.setvariable variable=runNodeTask;isOutput=true]false"
                echo "No changes in wp-content/."
              fi
          - task: NodeTool@0
            condition: eq(variables.runNodeTask, 'True')
            inputs:
              versionSource: 'spec'
              versionSpec: '20.x'
          - script: |
                  echo "$(themeDirectory)"
                  # cd $themeDirectory
                  # npm install
                  # npm run build
            condition: eq(variables.runNodeTask, 'True')
            displayName: 'npm install, build' 
  #         - task: ArchiveFiles@2
  #           inputs:
  #             rootFolderOrFile: '$(Build.SourcesDirectory)'
  #             includeRootFolder: true
  #             archiveType: 'zip'
  #             archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  #             replaceExistingArchive: true
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #             ArtifactName: '$(artifactName)'
  #             publishLocation: 'Container'

  # - stage: Deploy
  #   dependsOn: Build
  #   condition: succeeded()
  #   jobs:
  #     - job: "Deploy"
  #       steps:
  #         - task: ExtractFiles@1
  #           inputs:
  #             archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  #             destinationFolder: '$(System.DefaultWorkingDirectory)/extracted'
  #             cleanDestinationFolder: true
  #             overwriteExistingFiles: false
  #         - script: |
  #             mv $(System.DefaultWorkingDirectory)/extracted/s/* $(System.DefaultWorkingDirectory)/extracted/
  #             rmdir $(System.DefaultWorkingDirectory)/extracted/s
  #           displayName: 'Move files from "s" folder'
  #         - task: AzureWebApp@1
  #           inputs:
  #             azureSubscription: 'Sample'
  #             appType: 'webAppLinux'
  #             appName: wordpressdem
  #             resourceGroupName: rsne-demo
  #             package: '$(System.DefaultWorkingDirectory)/extracted'