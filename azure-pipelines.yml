trigger:
- main

pool:
  vmImage: ubuntu-latest
  
variables:
  artifactName: 'drop'

stages:
  - stage: Build
    jobs:
      - job: "Detect"
        steps:
          - checkout: self
          - script: |
                  echo "Checking for changes in wp-content..."
                  git fetch origin main
                  git diff --name-only origin/main...HEAD > changed.txt

                  echo "Changed files:"
                  cat changed.txt

                  if grep -q '^wp-content/themes/sssE/' changed.txt; then
                    echo "wp-content was changed"
                    echo "##vso[task.setvariable variable=wpContentChanged]true"
                  else
                    echo "wp-content NOT changed"
                    echo "##vso[task.setvariable variable=wpContentChanged]false"
                  f
            displayName: "Detect wp-content Changes"
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - script: |
              cd wp-content/themes/RSNE
              npm install
              npm run build
            condition: eq(variables['wpContentChanged'], 'true')
            displayName: 'npm install and build'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(artifactName)'
              publishLocation: 'Container'

  - stage: Deploy
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: "Deploy"
        steps:
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/extracted'
              cleanDestinationFolder: true
              overwriteExistingFiles: false
          - script: |
              mv $(System.DefaultWorkingDirectory)/extracted/s/* $(System.DefaultWorkingDirectory)/extracted/
              rmdir $(System.DefaultWorkingDirectory)/extracted/s
            displayName: 'Move files from "s" folder'
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Sample'
              appType: 'webAppLinux'
              appName: wordpressdem
              resourceGroupName: rsne-demo
              package: '$(System.DefaultWorkingDirectory)/extracted'