trigger:
- main

pool:
  vmImage: ubuntu-latest
  
variables:
  artifactName: 'drop'

stages:
  - stage: Build
    jobs:
      - job: "Detect"
        steps:
          - checkout: self
          - script: |
                echo "Checking for changes in wp-content..."
                    git fetch origin main
                    files=$(git diff --name-only origin/main HEAD)
                    count=$(echo "$files" | wc -l)
                    echo "Total changed files: $count"
                    
                    wpContentChanged=false  # Initialize the variable

                    while IFS= read -r name; do
                        echo "This is $name file"
                        if [[ "$name" == wp-content/themes/RSNE/* ]]; then
                            echo "##vso[task.setvariable variable=wpContentChanged]True"
                            wpContentChanged=true  # Set the flag to true
                            break  # Exit the loop if a change is found
                        fi
                    done <<< "$files"

                    if [ "$wpContentChanged" = false ]; then
                        echo "##vso[task.setvariable variable=wpContentChanged]False"
                    fi


            displayName: "Detect wp-content Changes"
  #         - task: NodeTool@0
  #           inputs:
  #             versionSpec: '20.x'
  #           displayName: 'Install Node.js'

  #         - script: |
  #             cd wp-content/themes/RSNE
  #             npm install
  #             npm run build
  #           condition: eq(variables['wpContentChanged'], 'true')
  #           displayName: 'npm install and build'
  #         - task: ArchiveFiles@2
  #           inputs:
  #             rootFolderOrFile: '$(Build.SourcesDirectory)'
  #             includeRootFolder: true
  #             archiveType: 'zip'
  #             archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  #             replaceExistingArchive: true
  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #             ArtifactName: '$(artifactName)'
  #             publishLocation: 'Container'

  # - stage: Deploy
  #   dependsOn: Build
  #   condition: succeeded()
  #   jobs:
  #     - job: "Deploy"
  #       steps:
  #         - task: ExtractFiles@1
  #           inputs:
  #             archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
  #             destinationFolder: '$(System.DefaultWorkingDirectory)/extracted'
  #             cleanDestinationFolder: true
  #             overwriteExistingFiles: false
  #         - script: |
  #             mv $(System.DefaultWorkingDirectory)/extracted/s/* $(System.DefaultWorkingDirectory)/extracted/
  #             rmdir $(System.DefaultWorkingDirectory)/extracted/s
  #           displayName: 'Move files from "s" folder'
  #         - task: AzureWebApp@1
  #           inputs:
  #             azureSubscription: 'Sample'
  #             appType: 'webAppLinux'
  #             appName: wordpressdem
  #             resourceGroupName: rsne-demo
  #             package: '$(System.DefaultWorkingDirectory)/extracted'