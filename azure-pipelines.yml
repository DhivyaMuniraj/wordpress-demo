trigger:
  branches:
    include:
      - dev

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
      - job: "Build"
        steps:
          - checkout: self
            fetchDepth: 0
          - script: |
              ls
              chmod +x ./script/detect_changes.sh
              ./script/detect_changes.sh
          - task: NodeTool@0
            condition: eq(variables.runNodeTask, 'True')
            inputs:
              versionSource: 'spec'
              versionSpec: '20.x'
          - script: |
                  echo "$(themeDirectory)"
                  cd $(themeDirectory)
                  npm install
                  npm run build
            condition: eq(variables.runNodeTask, 'True')
            displayName: 'npm install, build' 
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              publishLocation: 'Container'

  - stage: Deploy_Development
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: "Deploy_Development"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'archive'
              downloadPath: '$(Pipeline.Workspace)/drop'
          - task: AzureWebApp@1
            inputs:
              azureSubscription: Sample
              appType: 'webAppLinux'
              appName: $(devAppName)
              resourceGroupName: $(devResourceGroupName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

  # - stage: Deploy_QA
  #   dependsOn: Deploy_Development
  #   condition: succeeded()
  #   jobs:
  #     - deployment: Deploy_QA
  #       environment: 'QA'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - task: DownloadBuildArtifacts@0
  #                 inputs:
  #                   artifactName: 'archive'
  #                   downloadPath: '$(Pipeline.Workspace)/drop'
  #               - task: AzureWebApp@1
  #                 inputs:
  #                   azureSubscription: Sample
  #                   appType: 'webAppLinux'
  #                   appName: $(qaAppName)
  #                   resourceGroupName: $(qaResourceGroupName)
  #                   package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

  # - stage: Deploy_Production
  #   dependsOn: Deploy_QA
  #   condition: succeeded()
  #   jobs:
  #     - deployment: Deploy_Production
  #       environment: 'Production'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - task: DownloadBuildArtifacts@0
  #                 inputs:
  #                   artifactName: 'archive'
  #                   downloadPath: '$(Pipeline.Workspace)/drop'
  #               - task: AzureWebApp@1
  #                 inputs:
  #                   azureSubscription: Sample
  #                   appType: 'webAppLinux'
  #                   appName: $(prodAppName)
  #                   resourceGroupName: $(prodResourceGroupName)
  #                   package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
